#!/usr/bin/env bash
# Helper for managing per-worktree Cuttlefish instances on the Hetzner host.
# Mirrors the emulator tooling that records per-worktree state, but drives
# the systemd template service (`cuttlefish@<instance>`).

set -euo pipefail

REMOTE_HOST="${CUTTLEFISH_REMOTE_HOST:-hetzner}"

die() {
  echo "cuttlefish_instance: $*" >&2
  exit 1
}

repo_root() {
  git rev-parse --show-toplevel 2>/dev/null || die "must run inside the repo"
}

worktree_basename() {
  local root
  root="$(repo_root)"
  if [[ "$root" == *"/worktrees/"* ]]; then
    basename "$root"
  else
    git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "main"
  fi
}

sanitize_instance() {
  local raw="$1"
  raw="${raw,,}"
  raw="${raw//[^a-z0-9-]/-}"
  raw="${raw#-}"
  raw="${raw%-}"
  [[ -z "$raw" ]] && raw="main"
  local inst="cvd-${raw}"
  if ((${#inst} > 40)); then
    local short
    short="$(git rev-parse --short=8 HEAD 2>/dev/null || date +%s)"
    inst="cvd-${raw:0:24}-${short}"
  fi
  echo "$inst"
}

instance_name() {
  if [[ -n "${CUTTLEFISH_INSTANCE_OVERRIDE:-}" ]]; then
    echo "${CUTTLEFISH_INSTANCE_OVERRIDE}"
    return
  fi
  local id
  id="$(worktree_basename)"
  sanitize_instance "$id"
}

record_instance() {
  local inst="$1"
  local root
  root="$(repo_root)"
  printf '%s\n' "$inst" > "${root}/.cuttlefish-instance"
}

remote_sudo() {
  local cmd="$1"
  ssh "$REMOTE_HOST" "sudo bash -lc $(printf '%q' "$cmd")"
}

remote_raw() {
  ssh "$REMOTE_HOST" "$@"
}

ensure_envdir() {
  remote_sudo "install -d -m 0755 /etc/cuttlefish/instances"
}

write_env_file() {
  local inst="$1"
  local boot="$2"
  local init="$3"
  ensure_envdir
  if [[ -z "$boot" && -z "$init" ]]; then
    remote_sudo "rm -f /etc/cuttlefish/instances/${inst}.env"
    return
  fi
  local tmp
  tmp="$(mktemp)"
  {
    echo "# Autogenerated by scripts/cuttlefish_instance.sh ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"
    [[ -n "$boot" ]] && printf 'CUTTLEFISH_BOOT_IMAGE=%s\n' "$boot"
    [[ -n "$init" ]] && printf 'CUTTLEFISH_INIT_BOOT_IMAGE=%s\n' "$init"
  } >"$tmp"
  scp -q "$tmp" "${REMOTE_HOST}:/tmp/${inst}.env"
  remote_sudo "install -m 0640 /tmp/${inst}.env /etc/cuttlefish/instances/${inst}.env && rm -f /tmp/${inst}.env"
  rm -f "$tmp"
}

show_usage() {
  cat <<'EOF'
Usage: scripts/cuttlefish_instance.sh <command> [options]

Commands:
  instance-name                Print the deterministic instance name and record it locally.
  set-env [--boot PATH] [--init-boot PATH]
                               Write the per-instance environment file on the server.
                               Omit both flags to clear the file.
  start|stop|restart           Manage the cuttlefish@<instance> service.
  status                       Show systemd status for the instance.
  logs [--follow]              Tail journal logs for the instance.
  console-log [--follow]       Tail the guest console log for the instance.
  env                          Print the current environment file (if any).

Environment:
  CUTTLEFISH_INSTANCE_OVERRIDE  Override the computed instance name.
  CUTTLEFISH_REMOTE_HOST        SSH host alias (default: hetzner).
EOF
}

COMMAND="${1:-}"
if [[ -z "$COMMAND" ]]; then
  show_usage
  exit 1
fi
shift

INSTANCE="$(instance_name)"
record_instance "$INSTANCE"

case "$COMMAND" in
  instance-name)
    echo "$INSTANCE"
    ;;
  set-env)
    boot=""
    init=""
    while [[ $# -gt 0 ]]; do
      case "$1" in
        --boot)
          boot="${2:?missing value for --boot}"
          shift 2
          ;;
        --init-boot)
          init="${2:?missing value for --init-boot}"
          shift 2
          ;;
        --clear)
          boot=""
          init=""
          shift
          ;;
        *)
          die "unknown flag for set-env: $1"
          ;;
      esac
    done
    write_env_file "$INSTANCE" "$boot" "$init"
    echo "Updated /etc/cuttlefish/instances/${INSTANCE}.env on ${REMOTE_HOST}"
    ;;
  start|stop|restart)
    remote_sudo "systemctl $COMMAND cuttlefish@${INSTANCE}"
    ;;
  status)
    remote_sudo "systemctl status cuttlefish@${INSTANCE}"
    ;;
  logs)
    follow_flag=""
    if [[ "${1:-}" == "--follow" ]]; then
      follow_flag="-f"
      shift
    fi
    remote_raw journalctl -u "cuttlefish@${INSTANCE}" -n 200 $follow_flag
    ;;
  console-log)
    follow_flag=""
    if [[ "${1:-}" == "--follow" ]]; then
      follow_flag="-f"
      shift
    fi
    remote_raw bash -lc "$(printf 'tail %s /var/lib/cuttlefish/instances/%s/instances/%s/console_log' "$follow_flag" "$INSTANCE" "$INSTANCE")"
    ;;
  env)
    remote_raw sudo cat "/etc/cuttlefish/instances/${INSTANCE}.env" 2>/dev/null || {
      echo "(no env file for ${INSTANCE})"
    }
    ;;
  *)
    show_usage
    die "unknown command: $COMMAND"
    ;;
esac
